--DDL
--CREATE
CREATE TABLE TBL_USER(
	USER_NAME VARCHAR2(1000),
	USER_AGE NUMBER
);

SELECT *
FROM TBL_MY_USER;

--ALTER
--테이블명 수정
ALTER TABLE TBL_USER RENAME TO TBL_MY_USER;

--컬럼 추가
ALTER TABLE TBL_MY_USER ADD(USER_GENDER CHAR(4));

--컬럼명 수정
ALTER TABLE TBL_MY_USER RENAME COLUMN USER_NAME TO USER_NICKNAME;

--컬럼 삭제
ALTER TABLE TBL_MY_USER DROP COLUMN USER_GENDER;

--컬럼 자료형 수정
ALTER TABLE TBL_MY_USER MODIFY(USER_NICKNAME VARCHAR2(500));

--TRUNCATE
--TRUNCATE 실습을 위해 INSERT 두 개 추가
INSERT INTO TBL_MY_USER
VALUES('가람', 25);
INSERT INTO TBL_MY_USER
VALUES('유가람', 30);

--테이블 내용 전체 삭제
TRUNCATE TABLE TBL_MY_USER; 

--테이블 삭제
DROP TABLE TBL_MY_USER;

--============================================================================

DROP TABLE TBL_CAR;

--제약조건
--임의 테이블 생성
--테이블을 만듬과 동시에 해당 컬럼에 PK 제약조건 부여
CREATE TABLE TBL_CAR(
	CAR_ID NUMBER PRIMARY KEY,
	CAR_NAME VARCHAR2(1000),
	CAR_BRAND VARCHAR2(1000),
	CAR_RELEASE_DATE DATE,
	CAR_COLOR VARCHAR2(1000),
	CAR_PRICE NUMBER
);

SELECT * FROM TBL_CAR;

--ALTER문을 이용한 제약 조건 추가
ALTER TABLE TBL_CAR ADD CONSTRAINT PK_CAR PRIMARY KEY(CAR_ID);
/*
ALTER TABLE TBL_CAR : TBL_CAR 테이블을 수정하겠다.
ADD CONSTRAINT : 제약 조건을 추가하겠다.
PK_CHAR : 제약 조건 이름 (제약 조건을 삭제할 때 사용)
PRIMARY KEY(CAR_ID) : PK라는 제약조건을 CAR_ID에 컬럼에 부여
 */

ALTER TABLE TBL_CAR ADD PRIMARY KEY(CAR_ID);

--ALTER 문을 이용한 제약조건 삭제
ALTER TABLE TBL_CAR DROP CONSTRAINT PK_CAR;

--시스템이 부여한 이름을 가지고도 제약 조건 삭제 가능
ALTER TABLE TBL_CAR DROP CONSTRAINT SYS_C007000;

DROP TABLE TBL_CAR;

--제약 조건의 이름을 부여함과 동시에 제약 조건 추가
--제약 조건의 이름을 부여하기 위해서는 CONSTRAINT 키워드를 무조건 써야하며,
--설정하고 싶은 이름 앞에 명시해준다.
CREATE TABLE TBL_CAR(
	CAR_ID NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
	CAR_NAME VARCHAR2(1000),
	CAR_BRAND VARCHAR2(1000),
	CAR_RELEASE_DATE DATE,
	CAR_COLOR VARCHAR2(1000),
	CAR_PRICE NUMBER
);

DROP TABLE TBL_CAR;

CREATE TABLE TBL_CAR(
	CAR_ID NUMBER,
	CAR_NAME VARCHAR2(1000),
	CAR_BRAND VARCHAR2(1000),
	CAR_RELEASE_DATE DATE,
	CAR_COLOR VARCHAR2(1000),
	CAR_PRICE NUMBER,
	CONSTRAINT PK_CAR PRIMARY KEY(CAR_ID)
);

--=======================================================================

--동물 테이블
--고유번호, 종류, 나이, 먹이
CREATE TABLE TBL_ANIMAL(
	ANIMAL_ID NUMBER,
	ANIMAL_SPECIES VARCHAR2(1000),
	ANIMAL_AGE NUMBER,
	ANIMAL_FEED VARCHAR2(1000),
	CONSTRAINT PK_ANIMAL PRIMARY KEY(ANIMAL_ID)
);
--제약 조건 추가(PK)
ALTER TABLE TBL_ANIMAL ADD CONSTRAINT PK_ANIMAL PRIMARY KEY(ANIMAL_ID);
--제약 조건 삭제(PK)
ALTER TABLE TBL_ANIMAL DROP CONSTRAINT PK_ANIMAL;
--컬럼 추가(성별)
ALTER TABLE TBL_ANIMAL ADD(ANIMAL_GENDER CHAR(2));
--컬럼 이름 수정(고유번호)
ALTER TABLE TBL_ANIMAL RENAME COLUMN ANIMAL_ID TO ANIMAL_NUMBER;
--컬럼 삭제(먹이)
ALTER TABLE TBL_ANIMAL DROP COLUMN ANIMAL_FEED;
--컬럼 자료형 수정
ALTER TABLE TBL_ANIMAL MODIFY(ANIMAL_SPECIES VARCHAR2(500));
--동물 테이블 삭제
DROP TABLE TBL_ANIMAL;

SELECT * FROM TBL_ANIMAL;

--=======================================================================

--PK의 특징과 FK 부여 방법 및 특징
CREATE TABLE TBL_PRODUCT(
	PRODUCT_NUMBER NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(1000),
	PRODUCT_PRICE NUMBER
);

INSERT INTO TBL_PRODUCT
VALUES(1, '마우스', 50000);

INSERT INTO TBL_PRODUCT
VALUES(2, '키보드', 80000);

INSERT INTO TBL_PRODUCT
VALUES(2, '팜레스트', 20000); -- PK가 중복이라서 에러

INSERT INTO TBL_PRODUCT
VALUES(3, '팜레스트', NULL);--NULL도 값으로 사용할 수 있다.(값이 없음을 나타내는 값)

INSERT INTO TBL_PRODUCT
VALUES(4, '두루마리 휴지', 25000);

SELECT * FROM TBL_PRODUCT;

DROP TABLE TBL_PRODUCT;

--=======================================================================

--FK
CREATE TABLE TBL_SCHOOL(
	SCHOOL_NUMBER NUMBER,
	SCHOOL_NAME VARCHAR(500),
	CONSTRAINT PK_SCHOOL PRIMARY KEY(SCHOOL_NUMBER)
);

--이미 존재하는 TBL_STUDENT 삭제
DROP TABLE TBL_STUDENT;

CREATE TABLE TBL_STUDENT(
	STUDENT_NUMBER NUMBER,
	STUDENT_NAME VARCHAR2(500),
	STUDENT_AGE NUMBER,
	SCHOOL_NUMBER NUMBER,
	CONSTRAINT PK_STUDENT PRIMARY KEY(STUDENT_NUMBER),
	CONSTRAINT FK_STUDENT FOREIGN KEY(SCHOOL_NUMBER)
	REFERENCES TBL_SCHOOL(SCHOOL_NUMBER)
);

--직접 데이터를 삽입하면서
--어떤 식으로 동작하는지 알아보도록 하자
INSERT INTO TBL_SCHOOL
VALUES(1, '로지텍 고등학교');

INSERT INTO TBL_SCHOOL
VALUES(2, '레이저 고등학교');

INSERT INTO TBL_SCHOOL
VALUES(3, 'ABKO 고등학교');

SELECT * FROM TBL_SCHOOL;

--학생 테이블에 INSERT 진행
INSERT INTO TBL_STUDENT
VALUES(1, '유가람', 25, 1);

INSERT INTO TBL_STUDENT
VALUES(2, '홍길동', 23, 1);

INSERT INTO TBL_STUDENT
VALUES(3, '장보고', 22, 2);

INSERT INTO TBL_STUDENT
VALUES(4, '강감찬', 28, 4); --FK인 SCHOOL_NUMBER가 존재하지 않는 값을 저장

SELECT * FROM TBL_STUDENT;

--=======================================================================

--기타 제약 조건들
DROP TABLE TBL_STUDENT;

CREATE TABLE TBL_STUDENT(
	STUDENT_NUMBER NUMBER PRIMARY KEY,
	STUDENT_ID VARCHAR2(500) CONSTRAINT UK_STUDENT UNIQUE, --KEY를 붙이지 않음
	STUDENT_NAME VARCHAR2(500),
	STUDENT_MAJOR VARCHAR2(500),
	STUDENT_GENDER CHAR(1) DEFAULT 'W' NOT NULL 
	CONSTRAINT CHECK_GENDER CHECK(STUDENT_GENDER IN('M', 'W'))
);

INSERT INTO HR.TBL_STUDENT
(STUDENT_NUMBER, STUDENT_ID, STUDENT_NAME, STUDENT_MAJOR, STUDENT_GENDER)
VALUES(1, 'GARAM', '유가람', '뷰티미용', 'W' );

INSERT INTO HR.TBL_STUDENT
(STUDENT_NUMBER, STUDENT_ID, STUDENT_NAME, STUDENT_MAJOR, STUDENT_GENDER)
VALUES(2, 'GARAM', '홍길동', '컴공', 'M' ); --UK, 중복 허용 안됨

INSERT INTO HR.TBL_STUDENT
(STUDENT_NUMBER, STUDENT_ID, STUDENT_NAME, STUDENT_MAJOR, STUDENT_GENDER)
VALUES(2, 'GILDONG', '홍길동', '컴공', 'M' ); --아이디 바꾸니 잘 들어감

INSERT INTO HR.TBL_STUDENT
(STUDENT_NUMBER, STUDENT_ID, STUDENT_NAME, STUDENT_MAJOR)
VALUES(3, 'CHUNHYANG', '성춘향', '데이터사이언스'); --디폴트로 'W'를 넣어놔서 NULL이 아닌 W으로 표시 됨

INSERT INTO HR.TBL_STUDENT
(STUDENT_NUMBER, STUDENT_ID, STUDENT_NAME, STUDENT_MAJOR, STUDENT_GENDER)
VALUES(4, 'GATSBY', '개츠비', '재벌', 'K'); --CHECK에서 K가 걸림

SELECT * FROM TBL_STUDENT;